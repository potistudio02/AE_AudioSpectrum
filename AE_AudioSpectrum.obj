--track0: 開始位置, 0, 2000, 100
--track1: 終了位置, 0, 2000, 1820
--track2: 周波数帯, 0, 1000, 100
--track3: 高さ, 0, 1000, 300

--dialog: 色/col, local color=0xffffff; 開始周波数, local startFrequency=0; 終了周波数, local endFrequency=600; サンプルレベル, local sampleLevel=3; AUDIOデゥレーション, local audioDuration=1; AUDIOオフセット, local audioOffset=0; 太さ, local thickness=10; ディスプレイオプション, local displayOption=0; サイドオプション, local sideOption=1; 丸くする/chk, local isRounded=1; 半径, local radius=200;

-------- rikky_module Import --------
package.cpath = package.cpath .. ";" .. obj.getinfo ("script_path"):match ("(.*\\).*\\") .. "?.dll"
local bool, rikky_module = pcall (require, "rikky_module")
if not bool then
	obj.load ("<s100>require rikky_module!")
	obj.draw()
	return
end

-------- Setting --------
obj.setfont ("MS UI Gothic", 50, 0, 0xffffff)
obj.setoption ("drawtarget", "tempbuffer", obj.screen_w, obj.screen_h)

-------- Variable --------
local startPoint = obj.track0 - obj.screen_w / 2
local endPoint = obj.track1 - obj.screen_w / 2
local frequencyBand = obj.track2
local height = obj.track3 / 10000

local totalLength = endPoint - startPoint

local currentFrame, totalFrame = rikky_module.getinfo ("frame")

local spectrumBuffer = {}

error = false

-------- Function --------
function ShowError (value, m)
	error = true
	obj.load ("text", "Error " .. value .. "! The value is too " .. m)
	obj.draw()
end

--/ Lerp /--
function Lerp (a, b, t)
	return a * (1 - t) + b * t
end

function LerpArray (array, at)
	local mod = at % 1
	local before = at - mod
	local after = before + 1

	return Lerp (array[before] or 0, array[after] or 0, mod)
end

--/ Spline /--
function Spline (a, b, c, d, t)
	local x, y = obj.interpolation (t, 0, a, 1, b, 2, c, 3, d)

	return y
end

function SplineArray (array, at)
	local mod = at % 1
	local before = at - mod
	local before1 = before - 1
	local after = before + 1
	local after1 = after + 1

	return Spline (array[before1] or 0, array[before] or 0, array[after] or 0, array[after1] or 0, mod)
end

-------- Error --------
if endPoint < startPoint then ShowError ("終了位置", "small for 開始位置") end -- 終了位置が開始位置よりも小さい
if endFrequency < startFrequency then ShowError ("終了周波数", "small for 開始周波数") end -- 終了周波数が開始周波数よりも小さい
if startFrequency < 0 then ShowError ("開始周波数", "small") end -- 開始周波数が0よりも小さい
if endFrequency < 0 then ShowError ("終了周波数", "small") end -- 終了周波数が0よりも小さい
if sampleLevel < 0 then	ShowError ("サンプルレベル", "small") end -- サンプルレベルが0よりも小さい
if sampleLevel > 3 then ShowError ("サンプルレベル", "big") end -- サンプルレベルが3よりも大きい
if thickness < 0 then ShowError ("太さ", "small") end -- 太さが0よりも小さい
if displayOption < 0 then ShowError ("ディスプレイオプション", "small") end -- ディスプレイオプションが0よりも小さい
if displayOption > 2 then ShowError ("ディスプレイオプション", "big") end -- ディスプレイオプションが2よりも大きい
if sideOption < 0 then ShowError ("サイドオプション", "small") end -- サイドオプションが0よりも小さい
if sideOption > 2 then ShowError ("サイドオプション", "big") end -- サイドオプションが2よりも大きい
if radius < 0 then ShowError ("半径", "small") end -- 半径が0よりも小さい

-------- Main -------
if not error then
	--/ AUDIO /--
	if audioDuration == 1 then
		spectrumBuffer = rikky_module.audiobuffer (currentFrame + audioOffset, "FOURIER", "absolute", "monaural", 1024, sampleLevel, {startFrequency, endFrequency})
	else
		for i = 0, audioDuration do
			local buffer = rikky_module.audiobuffer (currentFrame + i + audioOffset, "FOURIER", "absolute", "monaural", 1024, sampleLevel, {startFrequency, endFrequency})

			for j = 1, #buffer do
				spectrumBuffer[j] = spectrumBuffer[j] or 0 + buffer[j] / audioDuration
			end
		end
	end


	--/ 描画 /--
	local space = #spectrumBuffer / frequencyBand
	local positionXBuffer = {}
	for i = 0, frequencyBand - 1 do
		positionXBuffer[i + 1] = totalLength / (frequencyBand - 1) * i + startPoint
	end

	if isRounded == 0 then
		for i = 0, frequencyBand - 1 do
			obj.load ("figure", "円", color, thickness)

			if displayOption == 0 then
				obj.draw (positionXBuffer[i + 1], 0, 0)
			end

			if displayOption ~= 1 then
				if sideOption ~= 2 then
					obj.draw (positionXBuffer[i + 1], SplineArray (spectrumBuffer, space * i) * -height, 0)
				end

				if sideOption ~= 1 then
						obj.draw (positionXBuffer[i + 1], SplineArray (spectrumBuffer, space * i) * height, 0)
				end
			end

			if displayOption ~= 2 then
				local S = {}
				for i = 1, 4 do
					S[i] = {}
					for j = 1, 2 do
						S[i][j] = 0
					end
				end

				obj.load ("figure", "四角形", color, 1)

				S[1][1] = positionXBuffer[i + 1] - (thickness / 2)
				S[1][2] = SplineArray (spectrumBuffer, space * i) * height
				S[2][1] = positionXBuffer[i + 1] + (thickness / 2)
				S[2][2] = SplineArray (spectrumBuffer, space * i) * height

				S[3][1] = positionXBuffer[i + 1] + (thickness / 2)
				S[3][2] = 0
				S[4][1] = positionXBuffer[i + 1] - (thickness / 2)
				S[4][2] = 0

				if sideOption ~= 2 then
					obj.drawpoly (S[1][1], -S[1][2], 0, S[2][1], -S[2][2], 0, S[3][1], S[3][2], 0, S[4][1], S[4][2], 0)
				end

				if sideOption ~= 1 then
					obj.drawpoly (S[1][1], S[1][2], 0, S[2][1], S[2][2], 0, S[3][1], S[3][2], 0, S[4][1], S[4][2], 0)
				end
			end
		end
	else
		for i = 0, frequencyBand - 1 do
			obj.load ("figure", "円", color, thickness)
			local rad = math.rad (360 / frequencyBand * i)

			if displayOption == 0 then
				obj.draw (math.sin(rad) * radius, math.cos(rad) * radius, 0)
			end

			if displayOption ~= 1 then
				if sideOption ~= 2 then
					obj.draw (math.sin(rad) * (SplineArray(spectrumBuffer, space * i) * height + radius), math.cos(rad) * (SplineArray(spectrumBuffer, space * i) * height + radius), 0)
				end

				if sideOption ~= 1 then
					obj.draw (math.sin(rad) * (SplineArray(spectrumBuffer, space * i) * -height + radius), math.cos(rad) * (SplineArray(spectrumBuffer, space * i) * -height + radius), 0)
				end
			end
		end
	end
end

-------- Final --------
obj.load ("tempbuffer")
obj.effect()
